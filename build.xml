<?xml version="1.0" encoding="UTF-8"?>    
<project name="saucelabs-behat" default="init">
<target name="init" depends="load-properties, run-check, clean-up, prepare, init-ad-hoc-tasks, generate-json-file, generate-yaml, loop-yamls"></target>

    <target name="run-check">
	<if>
	    <not>
		<available file="${test.behatymlFile}" />
	    </not>
	    <then>
		<fail message="Unable to find your default behat.yml file" />
	    </then>	
	</if>
    </target>

    <target name="load-properties">
        <property name="test.testName" value="${testname}"/>
        <property name="test.outputDir" value="${phing.dir}/tmp"/>
        <property name="test.jsonFile" value="${test.outputDir}/browsers.json"/>
	<property name="test.wdhostFile" value="${test.outputDir}/wdhost"/>
	<property name="test.behatymlFile" value="${phing.dir}/behat.yml"/>
    </target>

    <target name="clean-up">
        <delete dir="${test.outputDir}" />
    </target>

    <target name="prepare">
	<mkdir dir="${test.outputDir}" />
	<touch file="${test.jsonFile}" />
	<touch file="${test.wdhostFile}" />
    </target>

    <target name="init-ad-hoc-tasks">
        <adhoc-task name="generateYml"><![CDATA[
            class ymlGenerator extends Task {

                private $name = null;
                private $jsonFile = null;
                private $outputDir = null;
		private $wdhostFile = null;
		private $behatymlFile = null; 

                function setTestName($name) {
                    $this->name = $name;
                }

                function setJsonFile($jsonFile) {
                    $this->jsonFile = $jsonFile;
                }

                function setOutputDir($outputDir) {
                    $this->outputDir = $outputDir;
                }

		function setWdhostFile($wdhostFile) {
		    $this->wdhostFile = $wdhostFile;
		}

		function setBehatymlFile($behatymlFile) {
		    $this->behatymlFile = $behatymlFile;
		}

                function main() {
		    $wd_host = file_get_contents($this->wdhostFile);
                    $wd_host = trim(preg_replace('/\s\s+/', '', $wd_host));
		    $json = file_get_contents($this->jsonFile);
		    $behatyml = file_get_contents($this->behatymlFile);
		var_dump($behatyml); 
                    if(!is_dir($this->outputDir)) {
                        mkdir($this->outputDir, 0777, TRUE);
                    }

                    $jsonIterator = new RecursiveIteratorIterator(
                        new RecursiveArrayIterator(json_decode($json, TRUE)),
                        RecursiveIteratorIterator::SELF_FIRST);

                    $counter = 1;

                    foreach ($jsonIterator as $key => $val) {
                        if(is_array($val)) {
                            $yaml = array(
                                'sauce' => array(
                                    'filters' => array(
                                        'tags' => '@multibrowsers'
                                    ),
                                    'extensions' => array(
                                        'Behat\MinkExtension\Extension' => array(
                                            'selenium2' => array(
                                                'wd_host' => $wd_host,
                                                'browser' => $val['browser'],
                                                'capabilities' => array(
                                                    'platform' => $val['os'],
                                                    'version' => $val['browser-version'],
                                                    'name' => '['.$this->name.'] '.$val['os'].' '.$val['browser']
                                                )
                                            )
                                        )
                                    )
                                )
                            );
                            $yaml = yaml_emit($yaml);
                            $regex_patterns = array("/---\n/","/\.\.\./","/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/","/|/");
                            $regex_replacements = array("","","\n","");
                            $yaml = preg_replace($regex_patterns,$regex_replacements,$yaml);

                            $fileName = $this->outputDir."/".time()."-test".$counter.".yml";
			    file_put_contents($fileName,$behatyml.PHP_EOL);
			    $add = trim($yaml);
                            file_put_contents($fileName,$add.PHP_EOL, FILE_APPEND);

                            $counter++;
                        }
                    }
                }
            }
        ]]></adhoc-task>
    </target>

    <target name="generate-json-file">
	<exec command="echo ${SAUCE_ONDEMAND_BROWSERS} | python -mjson.tool > ${test.jsonFile}" escape="false"/>
	<exec command="echo ${SAUCE_USER_NAME}:${SAUCE_API_KEY}@${SELENIUM_HOST}/wd/hub > ${test.wdhostFile}" escape="false"/>
    </target>

    <target name="generate-yaml">
	<loadfile file="${test.jsonFile}" property="jsonFileContent" />
        <if>
            <or>
                <equals arg1="${jsonFileContent}" arg2="No JSON object could be decoded" />
                <equals arg1="${jsonFileContent}" arg2="" />
            </or>
            <then>
                <fail message="No browser(s) were selected." />
            </then>
            <else>
		<loadfile file="${test.wdhostFile}" property="wdhostFile"/>
		<generateYml testName="${test.testName}" jsonFile="${test.jsonFile}" outputDir="${test.outputDir}" wdhostFile="${test.wdhostFile}" behatymlFile="${test.behatymlFile}"/>
            </else>
        </if>
    </target>

    <target name="loop-yamls">
        <foreach param="filename" absparam="absfilename" target="run-behat">
            <fileset dir="${test.outputDir}">
                <include name="*.yml"/>
            </fileset>
        </foreach>
    </target>

   <target name="run-behat">
	<exec command="/var/lib/behat/bin/behat --config ${absfilename} /var/lib/behat/builds/bpostsd/features/customerRegister-step2.feature" passthru="true"/>
	<echo message="behat --config ${absfilename}"/>
   </target>
</project>


